{"quality_criteria": [{"name": "Scalability", "question": "- The system can add new service instances dynamically to handle increased traffic without requiring changes to the application code.\n- The database can handle increased read and write operations through techniques like replication, partitioning, or sharding.\n- The message broker (e.g., Kafka) can process a growing number of events without delays or bottlenecks."}, {"name": "Consistency", "question": "- The system achieves consistency across distributed services within a defined time frame (e.g., stock updates after an order).\n- Operations spanning multiple services (e.g., order placement and payment processing) maintain atomicity and consistency.\n- The system ensures strong consistency for critical operations (e.g., user profile updates) where required."}, {"name": "Reliability", "question": "- The system continues to provide essential functionality when a service instance or node fails.\n- The system identifies and recovers from faults (e.g., timeouts, errors in inter-service communication) without manual intervention.\n- The system provides degraded functionality (e.g., read-only mode) when connectivity to certain components\u00a0is\u00a0lost."}]}